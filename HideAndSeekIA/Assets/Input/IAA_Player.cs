//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/IAA_Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IAA_Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IAA_Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IAA_Player"",
    ""maps"": [
        {
            ""name"": ""HidingPlayer"",
            ""id"": ""a7a8ea72-8256-4f93-92e4-e5e082cdfd3c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8c99df81-a280-4ea5-a579-e60111852c11"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TakeObject"",
                    ""type"": ""Button"",
                    ""id"": ""023f44f0-7e91-4c18-a0aa-26d662086bf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2269bd24-e869-41a3-ab26-fa2d5084bfa2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e13676fc-0e53-4c7a-accc-29040f0b2131"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8cb8daec-413f-484e-9ef3-caf048142c42"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""85131edb-aa11-4acf-8f32-8a0b780a5f03"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""99eec2d5-fb39-4957-ab59-03e2342652f4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7eed85bf-9c8c-423d-a0ea-24cf392adf8a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SearchPlayer"",
            ""id"": ""fa35d032-7f2c-438d-9ffe-af32898b554e"",
            ""actions"": [
                {
                    ""name"": ""ChooseCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""faa6d9a8-a5c8-42b9-82c6-931d14ba7f3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""32c77999-24ef-4eb4-be64-3460ea778339"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HidingPlayer
        m_HidingPlayer = asset.FindActionMap("HidingPlayer", throwIfNotFound: true);
        m_HidingPlayer_Movement = m_HidingPlayer.FindAction("Movement", throwIfNotFound: true);
        m_HidingPlayer_TakeObject = m_HidingPlayer.FindAction("TakeObject", throwIfNotFound: true);
        // SearchPlayer
        m_SearchPlayer = asset.FindActionMap("SearchPlayer", throwIfNotFound: true);
        m_SearchPlayer_ChooseCharacter = m_SearchPlayer.FindAction("ChooseCharacter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HidingPlayer
    private readonly InputActionMap m_HidingPlayer;
    private List<IHidingPlayerActions> m_HidingPlayerActionsCallbackInterfaces = new List<IHidingPlayerActions>();
    private readonly InputAction m_HidingPlayer_Movement;
    private readonly InputAction m_HidingPlayer_TakeObject;
    public struct HidingPlayerActions
    {
        private @IAA_Player m_Wrapper;
        public HidingPlayerActions(@IAA_Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_HidingPlayer_Movement;
        public InputAction @TakeObject => m_Wrapper.m_HidingPlayer_TakeObject;
        public InputActionMap Get() { return m_Wrapper.m_HidingPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HidingPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IHidingPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_HidingPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HidingPlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @TakeObject.started += instance.OnTakeObject;
            @TakeObject.performed += instance.OnTakeObject;
            @TakeObject.canceled += instance.OnTakeObject;
        }

        private void UnregisterCallbacks(IHidingPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @TakeObject.started -= instance.OnTakeObject;
            @TakeObject.performed -= instance.OnTakeObject;
            @TakeObject.canceled -= instance.OnTakeObject;
        }

        public void RemoveCallbacks(IHidingPlayerActions instance)
        {
            if (m_Wrapper.m_HidingPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHidingPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_HidingPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HidingPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HidingPlayerActions @HidingPlayer => new HidingPlayerActions(this);

    // SearchPlayer
    private readonly InputActionMap m_SearchPlayer;
    private List<ISearchPlayerActions> m_SearchPlayerActionsCallbackInterfaces = new List<ISearchPlayerActions>();
    private readonly InputAction m_SearchPlayer_ChooseCharacter;
    public struct SearchPlayerActions
    {
        private @IAA_Player m_Wrapper;
        public SearchPlayerActions(@IAA_Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChooseCharacter => m_Wrapper.m_SearchPlayer_ChooseCharacter;
        public InputActionMap Get() { return m_Wrapper.m_SearchPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SearchPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ISearchPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_SearchPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SearchPlayerActionsCallbackInterfaces.Add(instance);
            @ChooseCharacter.started += instance.OnChooseCharacter;
            @ChooseCharacter.performed += instance.OnChooseCharacter;
            @ChooseCharacter.canceled += instance.OnChooseCharacter;
        }

        private void UnregisterCallbacks(ISearchPlayerActions instance)
        {
            @ChooseCharacter.started -= instance.OnChooseCharacter;
            @ChooseCharacter.performed -= instance.OnChooseCharacter;
            @ChooseCharacter.canceled -= instance.OnChooseCharacter;
        }

        public void RemoveCallbacks(ISearchPlayerActions instance)
        {
            if (m_Wrapper.m_SearchPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISearchPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_SearchPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SearchPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SearchPlayerActions @SearchPlayer => new SearchPlayerActions(this);
    public interface IHidingPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTakeObject(InputAction.CallbackContext context);
    }
    public interface ISearchPlayerActions
    {
        void OnChooseCharacter(InputAction.CallbackContext context);
    }
}
